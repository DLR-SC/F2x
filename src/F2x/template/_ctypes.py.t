{#-
	F2x template for Python
	
	This template uses the BIND(C) interface to generate easy access to the wrapped
	contents using ctypes.
-#}

{##### Macros #####}
{%- macro arg_types(args) -%}
{%- for arg in args -%}
	{%- if arg.intent == 'IN' %}{{ arg.pytype }}
	{%- else %}ctypes.POINTER({{ arg.pytype }})
	{%- endif %}
	{%- if not loop.last %}, {% endif %}
{%- endfor -%}
{%- endmacro -%}

{%- macro arg_names(args) -%}
{%- set names = [] %}
{%- for arg in args -%}
	{%- if arg.intent != 'OUT' %}{% do names.append(arg.name) %}
	{%- endif %}
{%- endfor -%}
{%- for name in names -%}
	{{ name }}{%- if not loop.last %}, {% endif %}
{%- endfor %}
{%- endmacro -%}

{%- macro arg_specs(args) %}
{%- for arg in args %}{% if arg.intent != 'IN' %}
    {{ arg.name }}_intern = {{ arg.pytype }}({% if arg.intent == 'INOUT' %}{{ arg.name }}{% endif %})
{%- endif %}{% endfor %} 
{%- endmacro -%}

{%- macro call_args(args) -%}
{%- set names = [] %}
{%- for arg in args -%}
	{%- if arg.intent == 'IN' -%}{{ arg.name }}
	{%- else -%}ctypes.byref({{ arg.name }}_intern)
	{%- endif %}
	{%- if not loop.last %}, {% endif %}
{%- endfor %}
{%- endmacro -%}

{#- Template starts here -#}
# This file was generated by F2x. Please do not change directly!

import ctypes
import os

{%- if config.has_section('pyimport') %}
{% for import_module in config.options('pyimport') %}
from {{ import_module }} import {{ config.get('pyimport', import_module) }}
{%- endfor %}
{%- endif %}

{{ module.name }} = ctypes.cdll.LoadLibrary(os.path.join(os.path.dirname(__file__), '{{ config.get('generate', 'dll') }}'))

# TODO Derived types

{%- if config.has_section('export') %}
{%- set exports = config.options('export') %}

#####################################
# Exported functions and subroutines
#
{%- for subroutine in module.subroutines %}
{%- if subroutine.name.lower() in exports %}
{%- set export_name = config.get('export', subroutine.name.lower()) %}

{{ module.name }}.{{ export_name }}.restype = None
{{ module.name }}.{{ export_name }}.argtypes = [{{ arg_types(subroutine.args) }}]
def {{ subroutine.name }}({{ arg_names(subroutine.args) }}):
	{{- arg_specs(subroutine.args) }}
    {{ module.name }}.{{ export_name }}({{ call_args(subroutine.args) }})

{%- endif %}
{%- endfor %}
{%- for function in module.functions %}
{%- if function.name.lower() in exports %}
{%- set export_name = config.get('export', function.name.lower()) %}
{%- if function.ret.getter == 'function' %}

{{ module.name }}.{{ export_name }}.restype = {{ function.ret.pytype }}
{{ module.name }}.{{ export_name }}.argtypes = [{{ arg_types(function.args) }}]
def {{ function.name }}({{ arg_names(function.args) }}):
	{{- arg_specs(function.args) }}
    {{ function.name }}_intern = {{ module.name }}.{{ export_name }}({{ call_args(function.args) }})
    return {{ function.name }}_intern

{%- elif function.ret.getter == 'subroutine' %}

{{ module.name }}.{{ export_name }}.restype = None
{{ module.name }}.{{ export_name }}.argtypes = [{{ arg_types(function.args) }}, {{ arg_types([function.ret]) }}]
def {{ function.name }}({{ arg_names(function.args) }}):
	{{- arg_specs(function.args) }}
	{{ function.name }}_value = {{ function.ret.pytype }}()
    {{ module.name }}.{{ export_name }}({{ call_args(function.args) }}, ctypes.byref({{ function.name }}_value))
    return {{ function.name }}_value.value

{%- endif%}
{%- endif %}
{%- endfor %}
{%- endif %}

