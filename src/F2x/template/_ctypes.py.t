# -*- coding: {{ context.args.encoding }} -*-
# This file was generated by F2x. Please do not change directly!

import ctypes
import os

{{ module.name }} = ctypes.cdll.LoadLibrary(os.path.join(os.path.dirname(__file__), '{{ config.get('generate', 'dll') }}'))
{%- for typ in module.types %}
{{ module.name }}.{{ typ.name }}_new.restype = ctypes.c_void_p
{{ module.name }}.{{ typ.name }}_new.argtypes = []
{{ module.name }}.{{ typ.name }}_free.restype = None
{{ module.name }}.{{ typ.name }}_free.argtypes = [ctypes.c_void_p]
{%- for field in typ.fields %}
{%- if field.getter == 'function' %}
{{ module.name }}.{{ typ.name }}_get_{{ field.name }}.restype = {{ field.pytype }}
{{ module.name }}.{{ typ.name }}_get_{{ field.name }}.argtypes = [ctypes.c_void_p]
{%- else %}
{{ module.name }}.{{ typ.name }}_get_{{ field.name }}.restype = None
{{ module.name }}.{{ typ.name }}_get_{{ field.name }}.argtypes = [ctypes.c_void_p, {{ field.pytype }}]
{%- endif %}
{%- if field.setter %}
{{ module.name }}.{{ typ.name }}_set_{{ field.name }}.restype = None
{{ module.name }}.{{ typ.name }}_set_{{ field.name }}.argtypes = [ctypes.c_void_p, {{ field.pytype }}]
{%- endif %}
{%- endfor %}
{%- endfor %}
{%- for typ in module.types %}

class {{ typ.name }}(object):
	def __init__(self, c_ptr=None, is_ref=True):
		if c_ptr is None:
			self.c_ptr = {{ module.name }}.{{ typ.name }}_new()
			self.is_ref = False
		else:
			self.c_ptr = c_ptr
			self.is_ref = is_ref
	
	def __del__(self):
		if self.c_ptr is not None \
		and not self.is_ref:
			{{ module.name }}.{{ typ.name }}_free(self.c_ptr)
		self.c_ptr = None
{%- for field in typ.fields %}

	def get_{{ field.name }}(self):
	{%- if field.getter == 'function' %}
	{%- if field.ftype %}
		return {{ field.ftype }}({{ module.name }}.{{ typ.name }}_get_{{ field.name }}(self.c_ptr))
	{%- else %}
		return {{ module.name }}.{{ typ.name }}_get_{{ field.name }}(self.c_ptr)
	{%- endif %}
	{%- else %}
		{{ field.name }}_value = {{ field.pytype }}()
		{{ module.name }}.{{ typ.name }}_get_{{ field.name }}(self.c_ptr, {{ field.name }}_value)
		return {{ field.name }}_value
	{%- endif %}
	{%- if field.setter %}
	
	def set_{{ field.name }}(self, value):
		{{ module.name }}.{{ typ.name }}_set_{{ field.name }}(self.c_ptr, value)
	{%- endif %}
{%- endfor %}
{% for field in typ.fields %}
	{{ field.name }} = property(get_{{ field.name }}{% if field.setter %}, set_{{ field.name }}{% endif %})
{%- endfor %}
{%- endfor %}

