# This file was generated by F2x. Please do not change directly!

import ctypes
import os

{%- if config.has_section('pyimport') %}
{% for import_module in config.options('pyimport') %}
from {{ import_module }} import {{ config.get('pyimport', import_module) }}
{%- endfor %}
{%- endif %}

{{ module.name }} = ctypes.cdll.LoadLibrary(os.path.join(os.path.dirname(__file__), '{{ config.get('generate', 'dll') }}'))
{%- for typ in module.types %}
{{ module.name }}.{{ typ.name }}_new.restype = ctypes.c_void_p
{{ module.name }}.{{ typ.name }}_new.argtypes = []
{{ module.name }}.{{ typ.name }}_free.restype = None
{{ module.name }}.{{ typ.name }}_free.argtypes = [ctypes.c_void_p]
{%- for field in typ.fields %}
{%- if field.getter == 'function' %}
{{ module.name }}.{{ typ.name }}_get_{{ field.name }}.restype = {{ field.pytype }}
{{ module.name }}.{{ typ.name }}_get_{{ field.name }}.argtypes = [ctypes.c_void_p]
{%- else %}
{{ module.name }}.{{ typ.name }}_get_{{ field.name }}.restype = None
{{ module.name }}.{{ typ.name }}_get_{{ field.name }}.argtypes = [ctypes.c_void_p, {{ field.pytype }}]
{%- endif %}
{%- if field.setter %}
{{ module.name }}.{{ typ.name }}_set_{{ field.name }}.restype = None
{{ module.name }}.{{ typ.name }}_set_{{ field.name }}.argtypes = [ctypes.c_void_p, {{ field.pytype }}]
{%- endif %}
{%- endfor %}
{%- endfor %}
{%- for typ in module.types %}

class {{ typ.name }}(object):
	def __init__(self, c_ptr=None, is_ref=True):
		if c_ptr is None:
			self.c_ptr = {{ module.name }}.{{ typ.name }}_new()
			self.is_ref = False
		else:
			self.c_ptr = c_ptr
			self.is_ref = is_ref
	
	def __del__(self):
		if self.c_ptr is not None \
		and not self.is_ref:
			{{ module.name }}.{{ typ.name }}_free(self.c_ptr)
		self.c_ptr = None
{%- for field in typ.fields %}

	def get_{{ field.name }}(self):
	{%- if field.getter == 'function' %}
	{%- if field.ftype %}
		return {{ field.ftype }}({{ module.name }}.{{ typ.name }}_get_{{ field.name }}(self.c_ptr))
	{%- else %}
		return {{ module.name }}.{{ typ.name }}_get_{{ field.name }}(self.c_ptr)
	{%- endif %}
	{%- elif field.getter == 'subroutine' %}
		{%- if field.strlen %}
		{{ field.name }}_value = ctypes.create_string_buffer({{ field.strlen }})
	 	{%- elif field.dims %}
		{{ field.name }}_value = ({{ field.pytype }} * {{ '*'.join(field.dims) }})()
		{%- else %}
		{{ field.name }}_value = {{ field.pytype }}()
		{%- endif %}
		{{ module.name }}.{{ typ.name }}_get_{{ field.name }}(self.c_ptr, {{ field.name }}_value)
		{%- if field.strlen %}
		return bytes({{ field.name }}_value).decode('ascii')
		{%- else %}
		return {{ field.name }}_value
		{%- endif %}
	{%- endif %}
	{%- if field.setter %}
	
	def set_{{ field.name }}(self, value):
		# TODO strings... 
		{{ module.name }}.{{ typ.name }}_set_{{ field.name }}(self.c_ptr, value)
	{%- endif %}
{%- endfor %}
{% for field in typ.fields %}
	{{ field.name }} = property(get_{{ field.name }}{% if field.setter %}, set_{{ field.name }}{% endif %})
{%- endfor %}
{%- endfor %}
{%- if config.has_section('export') %}
{%- set exports = config.options('export') %}
{%- for function in module.functions %}
{%- if function.name.lower() in exports %}
{%- set export_name = config.get('export', function.name.lower()) %}
{%- set call_args = [] %}
{%- if function.ret.getter == 'function' %}

{{ module.name }}.{{ export_name }}.restype = {% if function.ret.ftype %}ctypes.c_void_p{% else %}{{ function.ret.pytype }}{% endif %}
{{ module.name }}.{{ export_name }}.argtypes = [{% for arg in function.args %}{% if arg.dims %}{{ arg.pytype }} * {{ '*'.join(arg.dims) }}{% elif arg.ftype %}ctypes.c_void_p{% else %}{{ arg.pytype }}{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}]
{%- else %}

{{ module.name }}.{{ export_name }}.restype = None
{{ module.name }}.{{ export_name }}.argtypes = [{% for arg in function.args %}{% if arg.dims %}{{ arg.pytype }} * {{ '*'.join(arg.dims) }}{% elif arg.ftype %}ctypes.c_void_p{% else %}{{ arg.pytype }}{% endif %}, {% endfor %}{% if function.ret.ftype %}ctypes.c_void_p{% elif function.ret.strlen %}ctypes.c_char_p{% elif function.ret.dims %}{{ function.ret.pytype }} * {{ '*'.join(function.ret.dims) }}{% endif %}]
{%- endif %}
def {{ function.name }}({% for arg in function.args %}{{ arg.name }}{% if not loop.last %}, {% endif %}{% endfor %}):
{%- for arg in function.args %}
	{%- if arg.dims %}
		{{ arg.name }}_intern = ({{ arg.pytype }} * {{ '*'.join(arg.dims) }})(*{{ arg.name }})
		{%- do call_args.append(arg.name + '_intern') %}
	{%- else %}
		{%- if arg.strlen %}
		{{ arg.name }}_intern = ctypes.c_char_p({{ arg.name }}.encode('ascii'))
		{%- do call_args.append(arg.name + '_intern') %}
		{%- elif arg.ftype %}
		{%- do call_args.append(arg.name + '.c_ptr') %}
		{%- else %}
		{%- do call_args.append(arg.name) %}
		{%- endif %}
	{%- endif %}
{%- endfor %}
{%- if function.ret.getter == 'function' %}
	{%- if function.ret.ftype %}
		return {{ function.ret.ftype }}({{ module.name }}.{{ export_name }}({{ ', '.join(call_args) }}), False)
	{%- else %}
		return {{ module.name }}.{{ export_name }}({{ ', '.join(call_args) }})
	{%- endif %}
{%- elif function.ret.getter == 'subroutine' %}
	{%- if function.ret.strlen %}
		{{ export_name }}_value = ctypes.create_string_buffer({{ function.ret.strlen }})
		{%- do call_args.append(export_name + '_value') %}
	{%- elif function.ret.dims %}
		{{ export_name }}_value = ({{ function.ret.pytype }} * {{ '*'.join(function.ret.dims) }})()
		{%- do call_args.append(export_name + '_value') %}
	{%- endif %}
		{{ module.name }}.{{ export_name}}({{ ', '.join(call_args) }})
		{%- if function.ret.strlen %}
		return bytes({{ export_name }}_value[:]).decode('ascii')
		{%- else %}
		return {{ export_name }}_value
		{%- endif %}
{%- endif %}
{%- endif %}
{%- endfor %}
{%- for subroutine in module.subroutines %}
{%- if subroutine.name.lower() in exports %}
{%- set export_name = config.get('export', subroutine.name.lower()) %}
{%- set call_args = [] %}
{{ module.name }}.{{ export_name }}.restype = None
{{ module.name }}.{{ export_name }}.argtypes = [{% for arg in subroutine.args %}{% if arg.dims %}{{ arg.pytype }} * {{ '*'.join(arg.dims) }}{% elif arg.ftype %}ctypes.c_void_p{% else %}{{ arg.pytype }}{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}]
def {{ subroutine.name }}({% for arg in subroutine.args %}{{ arg.name }}{% if not loop.last %}, {% endif %}{% endfor %}):
{%- for arg in subroutine.args %}
	{%- if arg.dims %}
		{{ arg.name }}_intern = ({{ arg.pytype }} * {{ '*'.join(arg.dims) }})(*{{ arg.name }})
		{%- do call_args.append(arg.name + '_intern') %}
	{%- else %}
		{%- if arg.strlen %}
		{{ arg.name }}_intern = ctypes.c_char_p({{ arg.name }}.encode('ascii'))
		{%- do call_args.append(arg.name + '_intern') %}
		{%- elif arg.ftype %}
		{%- do call_args.append(arg.name + '.c_ptr') %}
		{%- else %}
		{%- do call_args.append(arg.name) %}
		{%- endif %}
	{%- endif %}
{%- endfor %}
		{{ module.name }}.{{ export_name}}({{ ', '.join(call_args) }})
{%- endif %}
{%- endfor %}
{%- endif %}

