{#-##################################################################################################################-#}
{#- F2x 'ctypes' main template.                                                                                      -#}
{#-                                                                                                                  -#}
{#- This template generates Python wrappers for FORTRAN `TYPE`s, `SUBROUTINE`s and `FUNCTION`s based on ctypes and   -#}
{#- NumPy for handling arrays.                                                                                       -#}
{#-##################################################################################################################-#}


{#- Import helper libraries. -#}
{%- import "calls.py.tl" as calls with context -%}
{%- import "types.py.tl" as types with context -%}


# This module was generated by the F2x 'ctypes' template. Please do not modify directly.
import ctypes
import os

import numpy

from F2x.template.ctypes.glue import FType, Field, ArrayField, Global, ArrayGlobal, \
                                     constructor, destructor, \
                                     array_from_pointer, \
                                     F2xError

{% if config.has_section("pyimport") -%}
	{% for imp in config.options("pyimport") %}
from {{ imp }} import {{ config.get("pyimport", imp) }}
	{%- endfor %}
{%- endif %}

library_name = '{{ config.get('generate', 'dll') }}'
library_path = os.path.join(os.path.dirname(__file__), library_name)
library = ctypes.cdll.LoadLibrary(library_path)


def check_error(name):
    code = library.f2x_err_get()
    if code != 0:
        raise F2xError(name, code)


library.f2x_err_get.argtypes = None
library.f2x_err_get.rtype = ctypes.c_int

{% for type in module.types if type.public %}
{{ types.export_type(type) }}
{% endfor %}

{% if module.globals %}
########################################################################################################################
# Global variables.
class _Globals(FType):
    _new = lambda _: None
    _free = lambda _, __: None

{% for global in module.globals %}
    {%- if global.dims %}
    {{ global.name }} = ArrayGlobal(
        "{{ global.name }}",
        {{ global.ftype or global.pytype }},
        [{{ types.join_dims(global.dims) }}],
        library.get_{{ global.name }}
        {%- if global.dims %},
        library.alloc_{{ global.name }}
        {%- endif %}
        {%- if global.strlen %},
        strlen={{ global.strlen }}
        {%- endif %}
    )
    {%- else %}
    {{ global.name }} = Global(
        {{ global.ftype or global.pytype }},
        library.get_{{ global.name }},
        {%- if global.setter %}
        library.set_{{ global.name }}
        {%- else %}
        None
        {%- endif %}
        {%- if global.dynamic %},
        library.alloc_{{ global.name }}
        {%- endif %}
    )
    {%- endif %}
{% endfor %}

globals = _Globals()
{% endif %}

########################################################################################################################
# Exported methods.
{%- for method in module.methods %}

# {{ method.name }}
{{ calls.import_method(method) }}
{{ calls.export_method(method) }}
{%- endfor %}
