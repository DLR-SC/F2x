{#-##################################################################################################################-#}
{#- F2x 'ctypes' main template.                                                                                      -#}
{#-                                                                                                                  -#}
{#- This template generates Python wrappers for FORTRAN `TYPE`s, `SUBROUTINE`s and `FUNCTION`s based on ctypes and   -#}
{#- NumPy for handling arrays.                                                                                       -#}
{#-##################################################################################################################-#}


{#- Import helper libraries. -#}
{%- import "calls.py.tl" as calls with context -%}
{%- import "types.py.tl" as types with context -%}


# This module was generated by the F2x 'ctypes' template. Please do not modify directly.
import ctypes
import os

import numpy

from F2x.template.ctypes.glue import FType, Field, ArrayField, \
                                     constructor, destructor, \
                                     array_from_pointer

library_name = '{{ config.get('generate', 'dll') }}'
library_path = os.path.join(os.path.dirname(__file__), library_name)
library = ctypes.cdll.LoadLibrary(library_path)

{% for type in module.types %}
    {%- if type.public %}
{{ types.export_type(type) }}
    {%- endif %}
{% endfor %}

########################################################################################################################
# Exported methods.
{%- for method in module.methods %}

# {{ method.name }}
{{ calls.import_method(method) }}
{{ calls.export_method(method) }}
{%- endfor %}
