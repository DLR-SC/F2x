{#-#################################################################################################################-#}
{#- F2x-Template: _ctypes.py.t                                                                                      -#}
{#-                                                                                                                 -#}
{#- This template generates Python code that accesses the Fortran wrapper code that was produced by the             -#}
{#- _bindc.f90.t template.                                                                                          -#}
{#-#################################################################################################################-#}
{%- import "_ctypes_types.py.tl" as type_lib with context -%}

# This file was generated by F2x using '_ctypes.py.t'. Please do not edit manually.
import ctypes
import os

{%- if config.has_section('pyimport') %}
{%- for import_module in config.options('pyimport') %}
from {{ import_module }} import {{ config.get('pyimport', import_module) }}
{%- endfor %}
{%- endif %}

from F2x.template.glue import DTArray

_lib = '{{ config.get('generate', 'dll') }}'
_path = os.path.join(os.path.dirname(__file__), _lib)
{{ module.name }} = ctypes.cdll.LoadLibrary(_path)

{#-=================================================================================================================-#}
{#- Derived types                                                                                                   -#}
{%- for type in module.types %}

#----------------------------------------------------------------------------------------------------------------------
# TYPE({{ type.name }}) from {{ module.name }}
{{ type_lib.import(type) }}
class {{ type.name }}(object): # TODO maybe a base class might be nice...
    {{ type_lib.constructor(type) }}
    
    {{ type_lib.destructor(type) }}

    {%- for field in type.fields %}
    {%- set prop = [] %}
    {{ type_lib.getter(type, field, prop) }}
    {{ type_lib.setter(type, field, prop) }}
    {{ type_lib.property(type, field, prop) }}
    {%- endfor %}
#----------------------------------------------------------------------------------------------------------------------
{%- endfor %}
