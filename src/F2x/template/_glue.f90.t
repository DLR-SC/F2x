{#-#################################################################################################################-#}
{#- F2x-Template: _bindc.f90.t                                                                                      -#}
{#-                                                                                                                 -#}
{#- This template generates a wrapper around Fortran routines that are usable from C code. This is done by using    -#}
{#- the BIND(C) standard to generate compatible interface.                                                          -#}
{#-#################################################################################################################-#}
{%- import '_bindc_types.f90.tl' as type_lib -%}
{%- import '_bindc_funcs.f90.tl' as func_lib -%}

! This file was generated by F2x using '_bindc.f90.t'. Please do not edit manually.
MODULE {{ module.name }}_BINDC
	USE, INTRINSIC :: ISO_C_BINDING
	USE C_INTERFACE_MODULE
{%- for use in module.uses %}
    USE {{ use }}
{%- endfor %}
    USE {{ module.name }}

    INTEGER, PARAMETER :: LF = 8
    
CONTAINS
{#-=================================================================================================================-#}
{#- Derived types                                                                                                   -#}
{%- for type in module.types %}

    !------------------------------------------------------------------------------------------------------------------
    ! TYPE({{ type.name }}) from {{ module.name }}
    {{ type_lib.constructor(type) }}

    {{ type_lib.destructor(type) }}
    {%- for field in type.fields %}
    {{ type_lib.allocator(type, field) }}
    {{ type_lib.getter(type, field) }}
    {{ type_lib.setter(type, field) }}
    {%- endfor %}
    !------------------------------------------------------------------------------------------------------------------
{%- endfor %}

{#-=================================================================================================================-#}
{#- Exported subroutines and functions                                                                              -#}
{%- if config.has_section('export') %}
{%- set exports = config.options('export') %}

    !------------------------------------------------------------------------------------------------------------------
    ! Exported subroutines and functions
{#- Subroutines first, but only those that are exported. #}
{%- for sub in module.subroutines if sub.name.lower() in exports %}

    {{ func_lib.routine(sub, config.get('export', sub.name.lower())) }}
{%- endfor %}

{#- Next the exported functions. #}
{%- for func in module.functions if func.name.lower() in exports %}
    {%- if func.ret.getter == 'function' %}
    {#- Only use function wrapper if return type can be returned this way... #}

    {{ func_lib.function(func, config.get('export', func.name.lower())) }}
    {%- else %}
    {#- ... otherwise, we need a subroutine-function. #}

    {{ func_lib.subfunc(func, config.get('export', func.name.lower())) }}
    {%- endif %}
{%- endfor %}
    !------------------------------------------------------------------------------------------------------------------
{%- endif %}

END
