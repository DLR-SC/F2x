/* [DllImport]-based wrapper for {{ context.filename }}
 * This file was generated by F2x. Please do not edit directly.
 */
using System.Runtime.InteropServices;
 {%- for typ in module.types %}

public class {{ typ.name }} {
	private IntPtr c_ptr;
	
	public {{ typ.name }}() {
		this.c_ptr = {{ typ.name }}.new_();
	}
	
	[DllImport("{{ config.get('generate', 'dll') }}", EntryPoint="{{ typ.name }}_new")]
	private static extern IntPtr new_();
	
	public ~{{ typ.name }}() {
		{{ typ.name }}.free_(this.c_ptr);
		this.c_ptr = null;
	}

	[DllImport("{{ config.get('generate', 'dll') }}", EntryPoint="{{ typ.name }}_free")]
	private static extern void free_(IntPtr c_ptr);
	{%- for field in typ.fields %}

	public {{ field.cstype }} {{ field.name }} {
	{%- if field.getter == 'function' %}
		get { return {{ typ.name }}.get_{{ field.name }}(this.c_ptr); }
	{% elif field.getter == 'subroutine' %}
		get {
			{{ field.cstype }} {{ field.name }}_value = null;
			this.get_{{ field.name }}(this.c_ptr, {{ field.name }}_value);
			return {{ field.name }}_value;
		}
	{% endif -%}	
	{%- if field.setter %}
		set { {{ typ.name }}.set_{{ field.name }}(this.c_ptr, value); }
	}
	{% endif %}

	{%- if field.getter == 'function' %}
	[DllImport("{{ config.get('generate', 'dll') }}", EntryPoint="{{ typ.name }}_get_{{ field.name }}")]
	public static {{ field.cstype }} get_{{ field.name }}(IntPtr c_ptr);
	{%- elif field.getter == 'subroutine' %}
	public static void get_{{ field.name }}(IntPtr c_ptr, ref {{ field.cstype }} {{ field.name }}_value);
	{% endif -%}
	{% if field.setter %}
	[DllImport("{{ config.get('generate', 'dll') }}", EntryPoint="{{ typ.name }}_set_{{ field.name }}")]
	public static void set_{{ field.name }}(IntPtr c_ptr, {{ field.cstype }} {{ field.name }}_value);
	{% endif %}
	{% endfor -%}
}
{%- endfor %}

public class {{ module.name }} {
}
