{#-##################################################################################################################-#}
{#- F2x 'ctypes' main template.                                                                                      -#}
{#-                                                                                                                  -#}
{#- This template generates Python wrappers for FORTRAN `TYPE`s, `SUBROUTINE`s and `FUNCTION`s based on ctypes and   -#}
{#- NumPy for handling arrays.                                                                                       -#}
{#-                                                                                                                  -#}
{#- Copyright 2018 German Aerospace Center (DLR)                                                                     -#}
{#-                                                                                                                  -#}
{#- Licensed under the Apache License, Version 2.0 (the "License");                                                  -#}
{#- you may not use this file except in compliance with the License.                                                 -#}
{#- You may obtain a copy of the License at                                                                          -#}
{#-                                                                                                                  -#}
{#-     http://www.apache.org/licenses/LICENSE-2.0                                                                   -#}
{#-                                                                                                                  -#}
{#- Unless required by applicable law or agreed to in writing, software                                              -#}
{#- distributed under the License is distributed on an "AS IS" BASIS,                                                -#}
{#- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                         -#}
{#- See the License for the specific language governing permissions and                                              -#}
{#- limitations under the License.                                                                                   -#}
{#-##################################################################################################################-#}


{#- Import helper libraries. -#}
{%- import "calls.py.tl" as calls with context -%}
{%- import "types.py.tl" as types with context -%}


# This module was generated by the F2x 'ctypes' template. Please do not modify directly.
import ctypes
import os

import numpy

from {% if context.args.py_absolute_import %}F2x.template.ctypes{% endif %}.glue import FType, Field, ArrayField, Global, ArrayGlobal, \
                  constructor, destructor, array_from_pointer, \
                  F2xError

{% if config.has_section("pyimport") -%}
	{% for imp in config.options("pyimport") %}
from {{ imp }} import {{ config.get("pyimport", imp) }}
	{%- endfor %}
{%- endif %}

library_name = '{{ config.get('generate', 'dll') }}'
library_path = os.path.join(os.path.dirname(__file__), library_name)
library = ctypes.cdll.LoadLibrary(library_path)


{% for type in module.types if type.public %}
{{ types.export_type(type) }}
{% endfor %}

{% if module.globals %}
########################################################################################################################
# Global variables.
class _Globals(FType):
    _new = lambda _: None
    _free = lambda _, __: None

{% for global in module.globals %}
    {%- if global.dims %}
    {{ global.name }} = ArrayGlobal(
        "{{ global.name }}",
        {{ global.ftype or global.pytype }},
        [{{ types.join_dims(global.dims) }}],
        library.get_{{ global.name }}
        {%- if global.dims %},
        library.alloc_{{ global.name }}
        {%- endif %}
        {%- if global.strlen %},
        strlen={{ global.strlen }}
        {%- endif %}
    )
    {%- else %}
    {{ global.name }} = Global(
        {{ global.ftype or global.pytype }},
        library.get_{{ global.name }},
        {%- if global.setter %}
        library.set_{{ global.name }}
        {%- else %}
        None
        {%- endif %}
        {%- if global.dynamic %},
        library.alloc_{{ global.name }}
        {%- endif %}
    )
    {%- endif %}
{% endfor %}

globals = _Globals()
{% endif %}

########################################################################################################################
# Exported methods.
{%- for method in module.methods %}

# {{ method.name }}
{{ calls.import_method(method) }}
{{ calls.export_method(method) }}
{%- endfor %}
