"""
This module provides Python helper classes ("glue code") for use with code generated by F2x.
"""
import ctypes

from F2x.glue import main

# Impoort Fortran library.
libF2x = ctypes.cdll.LoadLibrary(main.find_library_path())

# 2D array helpers
libF2x.F2x_int2d_alloc.argtypes = [ctypes.c_void_p]
libF2x.F2x_int2d_alloc.restype = ctypes.c_void_p
libF2x.F2x_int2d_getitem.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
libF2x.F2x_int2d_getitem.restype = ctypes.c_int32
libF2x.F2x_int2d_setitem.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_int32]
libF2x.F2x_int2d_setitem.restype = None
libF2x.F2x_int2d_free.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
libF2x.F2x_int2d_free.restype = None

# 3D array helpers
libF2x.F2x_int3d_alloc.argtypes = [ctypes.c_void_p]
libF2x.F2x_int3d_alloc.restype = ctypes.c_void_p
libF2x.F2x_int3d_getitem.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
libF2x.F2x_int3d_getitem.restype = ctypes.c_int32
libF2x.F2x_int3d_setitem.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_int32]
libF2x.F2x_int3d_setitem.restype = None
libF2x.F2x_int3d_free.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
libF2x.F2x_int3d_free.restype = None

class F2Array(object):
    def __init__(self, *sizes):
        self._sizes = (ctypes.c_int32 * len(sizes))(*sizes)
        
        if len(self._sizes) == 2:
            self._ptr = libF2x.F2x_int2d_alloc(ctypes.cast(self._sizes, ctypes.POINTER(ctypes.c_int32)))
        
        elif len(self._sizes) == 3:
            self._ptr = libF2x.F2x_int3d_alloc(ctypes.cast(self._sizes, ctypes.POINTER(ctypes.c_int32)))

    def __getitem__(self, index):
        _indices = (ctypes.c_int32 * len(self._sizes))(*index)
        return libF2x.F2x_int2d_getitem(self._ptr, ctypes.cast(self._sizes, ctypes.POINTER(ctypes.c_int32)), ctypes.cast(_indices, ctypes.POINTER(ctypes.c_int32)))
    
    def __setitem__(self, index, value):
        _indices = (ctypes.c_int32 * len(self._sizes))(*index)
        libF2x.F2x_int2d_setitem(self._ptr, ctypes.cast(self._sizes, ctypes.POINTER(ctypes.c_int32)), ctypes.cast(_indices, ctypes.POINTER(ctypes.c_int32)), value)
    
    def __del__(self):
        if len(self._sizes) == 2:
            libF2x.F2x_int2d_free(self._ptr, ctypes.cast(self._sizes, ctypes.POINTER(ctypes.c_int32)))
        
        elif len(self._sizes) == 3:
            libF2x.F2x_int3d_free(self._ptr, ctypes.cast(self._sizes, ctypes.POINTER(ctypes.c_int32)))

if __name__ == '__main__':
    a = F2Array(3, 3)
    a[0, 0] = 1
    a[1, 1] = 3
    print(a[0, 0], a[1, 1])
    
    b = F2Array(2, 2, 2)
